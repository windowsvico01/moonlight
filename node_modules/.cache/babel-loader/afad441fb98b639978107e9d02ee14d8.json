{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { fromJS } from 'immutable';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // 如果不想开生产环境使用开发者工具，可以使用redux-devtools-extension/developmentOnly\n\nimport createReducer from './rootReducer';\nconst sagaMiddleware = createSagaMiddleware({});\nexport default function configureStore(initialState = {}, history) {\n  // 创建的store包含的middleware：\n  // 1.sagaMiddleware\n  // 2.routerMiddleware: 异步的将location/URL添加到state\n  const middlewares = [sagaMiddleware];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(createReducer(), fromJS(initialState), composeWithDevTools(...enhancers)); // 自定义的一些扩展\n\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {}; // 异步注入的reducers\n\n  if (module.hot) {\n    // 热更新\n    module.hot.accept('./rootReducer', () => {\n      import('./rootReducer').then(reducerModule => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/yangpu-bt/personal/moonlt3/src/configStore.js"],"names":["createStore","applyMiddleware","compose","fromJS","routerMiddleware","createSagaMiddleware","composeWithDevTools","createReducer","sagaMiddleware","configureStore","initialState","history","middlewares","enhancers","store","runSaga","run","asyncReducers","module","hot","accept","then","reducerModule","createReducers","default","nextReducers","replaceReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,eAA1B;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,CAAC,EAAD,CAA3C;AAEA,eAAe,SAASI,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2CC,OAA3C,EAAoD;AACjE;AACA;AACA;AACA,QAAMC,WAAW,GAAG,CAClBJ,cADkB,CAApB;AAKA,QAAMK,SAAS,GAAG,CAChBZ,eAAe,CAAC,GAAGW,WAAJ,CADC,CAAlB;AAIA,QAAME,KAAK,GAAGd,WAAW,CACvBO,aAAa,EADU,EAEvBJ,MAAM,CAACO,YAAD,CAFiB,EAGvBJ,mBAAmB,CAAC,GAAGO,SAAJ,CAHI,CAAzB,CAbiE,CAkBjE;;AACAC,EAAAA,KAAK,CAACC,OAAN,GAAgBP,cAAc,CAACQ,GAA/B;AACAF,EAAAA,KAAK,CAACG,aAAN,GAAsB,EAAtB,CApBiE,CAoBtC;;AAE3B,MAAIC,MAAM,CAACC,GAAX,EAAgB;AAAE;AAChBD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,eAAlB,EAAmC,MAAM;AACvC,aAAO,eAAP,EAAwBC,IAAxB,CAA8BC,aAAD,IAAmB;AAC9C,cAAMC,cAAc,GAAGD,aAAa,CAACE,OAArC;AACA,cAAMC,YAAY,GAAGF,cAAc,CAACT,KAAK,CAACG,aAAP,CAAnC;AAEAH,QAAAA,KAAK,CAACY,cAAN,CAAqBD,YAArB;AACD,OALD;AAMD,KAPD;AAQD;;AAED,SAAOX,KAAP;AACD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { fromJS } from 'immutable';\nimport { routerMiddleware } from 'connected-react-router'\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// 如果不想开生产环境使用开发者工具，可以使用redux-devtools-extension/developmentOnly\nimport createReducer from './rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware({});\n\nexport default function configureStore(initialState = {}, history) {\n  // 创建的store包含的middleware：\n  // 1.sagaMiddleware\n  // 2.routerMiddleware: 异步的将location/URL添加到state\n  const middlewares = [\n    sagaMiddleware,\n    // routerMiddleware(history),\n  ];\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n  ];\n  \n  const store = createStore(\n    createReducer(),\n    fromJS(initialState),\n    composeWithDevTools(...enhancers),\n  );\n  // 自定义的一些扩展\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {};  // 异步注入的reducers\n\n  if (module.hot) { // 热更新\n    module.hot.accept('./rootReducer', () => {\n      import('./rootReducer').then((reducerModule) => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return store;\n}"]},"metadata":{},"sourceType":"module"}