{"ast":null,"code":"import { conformsTo, isEmpty, isFunction, isObject, isString } from 'lodash';\nimport invariant from 'invariant';\nimport warning from 'warning';\nimport createReducer from '../rootReducer';\nimport { history } from '../configStore';\n/**\n * 校验传入的store是否合法\n */\n\nexport function checkStore(store) {\n  const shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    asyncReducer: isObject // invariant(\n    //   conformsTo(store, shape),\n    //   '(app/utils...) asyncInjectors: Expected a valid redux store(store校验不合法)'\n    // );\n\n  };\n}\n/**\n * 注入异步加载的reducer\n * @export\n * @param {*} store\n * @param {*} isValid\n */\n\nexport function injectAsyncReducer(store, isValid) {\n  return function injectReducer(name, asyncReducer) {\n    if (!isValid) checkStore(store);\n    invariant(isString(name) && !isEmpty(name) && isFunction(asyncReducer), '(app/utils...) injectAsyncReducer: Expected `asyncReducer` to be a reducer function(reducer校验不合法)');\n    if (store.asyncReducers[name]) return;\n    if (Reflect.has(store.asyncReducers, name)) return;\n    store.asyncReducers[name] = asyncReducer;\n    store.replaceReducer(createReducer(history, store.asyncReducers));\n  };\n}\n/**\n * 注入异步加载的sagas\n * @export\n * @param {*} store\n * @param {*} isValid\n * @returns\n */\n\nexport function injectAsyncSagas(store, isValid) {\n  return function injectSagas(sagas) {\n    if (!isValid) checkStore(store);\n    invariant(Array.isArray(sagas), '(app/utils...) injectAsyncSagas: Expected `sagas` to be an array of generator functions');\n    warning(!isEmpty(sagas), '(app/utils...) injectAsyncSagas: Received an empty `sagas` array');\n    sagas.map(store.runSaga);\n  };\n}\nexport function getAsyncInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectAsyncReducer(store, true),\n    injectSagas: injectAsyncSagas(store, true)\n  };\n}","map":{"version":3,"sources":["/Users/yangpu-bt/personal/moonlt3/src/utils/asyncInjectors.js"],"names":["conformsTo","isEmpty","isFunction","isObject","isString","invariant","warning","createReducer","history","checkStore","store","shape","dispatch","subscribe","getState","replaceReducer","runSaga","asyncReducer","injectAsyncReducer","isValid","injectReducer","name","asyncReducers","Reflect","has","injectAsyncSagas","injectSagas","sagas","Array","isArray","map","getAsyncInjectors"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,UAA9B,EAA0CC,QAA1C,EAAoDC,QAApD,QAAoE,QAApE;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAGA;;;;AAGA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAChC,QAAMC,KAAK,GAAG;AACZC,IAAAA,QAAQ,EAAEV,UADE;AAEZW,IAAAA,SAAS,EAAEX,UAFC;AAGZY,IAAAA,QAAQ,EAAEZ,UAHE;AAIZa,IAAAA,cAAc,EAAEb,UAJJ;AAKZc,IAAAA,OAAO,EAAEd,UALG;AAMZe,IAAAA,YAAY,EAAEd,QANF,CAQd;AACA;AACA;AACA;;AAXc,GAAd;AAYD;AACD;;;;;;;AAMA,OAAO,SAASe,kBAAT,CAA4BR,KAA5B,EAAmCS,OAAnC,EAA4C;AACjD,SAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BJ,YAA7B,EAA2C;AAChD,QAAI,CAACE,OAAL,EAAcV,UAAU,CAACC,KAAD,CAAV;AAEdL,IAAAA,SAAS,CACPD,QAAQ,CAACiB,IAAD,CAAR,IAAkB,CAACpB,OAAO,CAACoB,IAAD,CAA1B,IAAoCnB,UAAU,CAACe,YAAD,CADvC,EAEP,mGAFO,CAAT;AAIA,QAAIP,KAAK,CAACY,aAAN,CAAoBD,IAApB,CAAJ,EAA+B;AAC/B,QAAIE,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACY,aAAlB,EAAiCD,IAAjC,CAAJ,EAA4C;AAE5CX,IAAAA,KAAK,CAACY,aAAN,CAAoBD,IAApB,IAA4BJ,YAA5B;AACAP,IAAAA,KAAK,CAACK,cAAN,CAAqBR,aAAa,CAACC,OAAD,EAAUE,KAAK,CAACY,aAAhB,CAAlC;AACD,GAZD;AAaD;AACD;;;;;;;;AAOA,OAAO,SAASG,gBAAT,CAA0Bf,KAA1B,EAAiCS,OAAjC,EAA0C;AAC/C,SAAO,SAASO,WAAT,CAAqBC,KAArB,EAA4B;AACjC,QAAI,CAACR,OAAL,EAAcV,UAAU,CAACC,KAAD,CAAV;AAEdL,IAAAA,SAAS,CACPuB,KAAK,CAACC,OAAN,CAAcF,KAAd,CADO,EAEP,yFAFO,CAAT;AAKArB,IAAAA,OAAO,CACL,CAACL,OAAO,CAAC0B,KAAD,CADH,EAEL,kEAFK,CAAP;AAKAA,IAAAA,KAAK,CAACG,GAAN,CAAUpB,KAAK,CAACM,OAAhB;AACD,GAdD;AAeD;AAED,OAAO,SAASe,iBAAT,CAA2BrB,KAA3B,EAAkC;AACvCD,EAAAA,UAAU,CAACC,KAAD,CAAV;AACA,SAAO;AACLU,IAAAA,aAAa,EAAEF,kBAAkB,CAACR,KAAD,EAAQ,IAAR,CAD5B;AAELgB,IAAAA,WAAW,EAAED,gBAAgB,CAACf,KAAD,EAAQ,IAAR;AAFxB,GAAP;AAID","sourcesContent":["import { conformsTo, isEmpty, isFunction, isObject, isString } from 'lodash';\nimport invariant from 'invariant';\nimport warning from 'warning';\nimport createReducer from '../rootReducer';\nimport { history } from '../configStore';\n\n\n/**\n * 校验传入的store是否合法\n */\nexport function checkStore(store) {\n  const shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    asyncReducer: isObject,\n  }\n  // invariant(\n  //   conformsTo(store, shape),\n  //   '(app/utils...) asyncInjectors: Expected a valid redux store(store校验不合法)'\n  // );\n}\n/**\n * 注入异步加载的reducer\n * @export\n * @param {*} store\n * @param {*} isValid\n */\nexport function injectAsyncReducer(store, isValid) {\n  return function injectReducer(name, asyncReducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(name) && !isEmpty(name) && isFunction(asyncReducer),\n      '(app/utils...) injectAsyncReducer: Expected `asyncReducer` to be a reducer function(reducer校验不合法)'\n    );\n    if (store.asyncReducers[name]) return;\n    if (Reflect.has(store.asyncReducers, name)) return;\n\n    store.asyncReducers[name] = asyncReducer;\n    store.replaceReducer(createReducer(history, store.asyncReducers));\n  };\n}\n/**\n * 注入异步加载的sagas\n * @export\n * @param {*} store\n * @param {*} isValid\n * @returns\n */\nexport function injectAsyncSagas(store, isValid) {\n  return function injectSagas(sagas) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      Array.isArray(sagas),\n      '(app/utils...) injectAsyncSagas: Expected `sagas` to be an array of generator functions'\n    );\n\n    warning(\n      !isEmpty(sagas),\n      '(app/utils...) injectAsyncSagas: Received an empty `sagas` array'\n    );\n\n    sagas.map(store.runSaga);\n  }\n}\n\nexport function getAsyncInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectAsyncReducer(store, true),\n    injectSagas: injectAsyncSagas(store, true),\n  }\n}"]},"metadata":{},"sourceType":"module"}