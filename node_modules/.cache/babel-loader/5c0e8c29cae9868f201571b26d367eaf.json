{"ast":null,"code":"/*\n * AppReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\nimport produce from 'immer'; // import { LOAD_REPOS_SUCCESS, LOAD_REPOS, LOAD_REPOS_ERROR } from './constants';\n// The initial state of the App\n\nexport const initialState = {\n  loading: false,\n  error: false,\n  currentUser: false,\n  userData: {\n    repositories: false\n  }\n};\n/* eslint-disable default-case, no-param-reassign */\n\nconst appReducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_REPOS:\n      draft.loading = true;\n      draft.error = false;\n      draft.userData.repositories = false;\n      break;\n\n    case LOAD_REPOS_SUCCESS:\n      draft.userData.repositories = action.repos;\n      draft.loading = false;\n      draft.currentUser = action.username;\n      break;\n\n    case LOAD_REPOS_ERROR:\n      draft.error = action.error;\n      draft.loading = false;\n      break;\n  }\n}); // const appReducer = (state = initialState, action) =>{\n//     return state;\n// }\n\n\nexport default appReducer;","map":{"version":3,"sources":["/Users/yangpu-bt/personal/moonlt3/src/containers/App/reducer.js"],"names":["produce","initialState","loading","error","currentUser","userData","repositories","appReducer","state","action","draft","type","LOAD_REPOS","LOAD_REPOS_SUCCESS","repos","username","LOAD_REPOS_ERROR"],"mappings":"AAAA;;;;;;;;AASA,OAAOA,OAAP,MAAoB,OAApB,C,CACA;AAEA;;AACA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,KAAK,EAAE,KAFmB;AAG1BC,EAAAA,WAAW,EAAE,KAHa;AAI1BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE;AADN;AAJgB,CAArB;AASP;;AACA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KACjBT,OAAO,CAACQ,KAAD,EAAQE,KAAK,IAAI;AACtB,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKC,UAAL;AACEF,MAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACAQ,MAAAA,KAAK,CAACP,KAAN,GAAc,KAAd;AACAO,MAAAA,KAAK,CAACL,QAAN,CAAeC,YAAf,GAA8B,KAA9B;AACA;;AAEF,SAAKO,kBAAL;AACEH,MAAAA,KAAK,CAACL,QAAN,CAAeC,YAAf,GAA8BG,MAAM,CAACK,KAArC;AACAJ,MAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACAQ,MAAAA,KAAK,CAACN,WAAN,GAAoBK,MAAM,CAACM,QAA3B;AACA;;AAEF,SAAKC,gBAAL;AACEN,MAAAA,KAAK,CAACP,KAAN,GAAcM,MAAM,CAACN,KAArB;AACAO,MAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACA;AAhBJ;AAkBD,CAnBM,CADT,C,CAqBA;AACA;AACA;;;AAEA,eAAeK,UAAf","sourcesContent":["/*\n * AppReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\n// import { LOAD_REPOS_SUCCESS, LOAD_REPOS, LOAD_REPOS_ERROR } from './constants';\n\n// The initial state of the App\nexport const initialState = {\n  loading: false,\n  error: false,\n  currentUser: false,\n  userData: {\n    repositories: false,\n  },\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst appReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case LOAD_REPOS:\n        draft.loading = true;\n        draft.error = false;\n        draft.userData.repositories = false;\n        break;\n\n      case LOAD_REPOS_SUCCESS:\n        draft.userData.repositories = action.repos;\n        draft.loading = false;\n        draft.currentUser = action.username;\n        break;\n\n      case LOAD_REPOS_ERROR:\n        draft.error = action.error;\n        draft.loading = false;\n        break;\n    }\n  });\n// const appReducer = (state = initialState, action) =>{\n//     return state;\n// }\n\nexport default appReducer;\n"]},"metadata":{},"sourceType":"module"}