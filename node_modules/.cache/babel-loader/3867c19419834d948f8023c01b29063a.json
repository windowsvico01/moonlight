{"ast":null,"code":"/*\n * AppReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n// import produce from 'immer';\n// import { LOAD_REPOS_SUCCESS, LOAD_REPOS, LOAD_REPOS_ERROR } from './constants';\n// The initial state of the App\nexport const initialState = {\n  loading: false,\n  error: false,\n  currentUser: false,\n  userData: {\n    repositories: false\n  }\n};\n/* eslint-disable default-case, no-param-reassign */\n// const appReducer = (state = initialState, action) =>\n//   produce(state, draft => {\n//     switch (action.type) {\n//       case LOAD_REPOS:\n//         draft.loading = true;\n//         draft.error = false;\n//         draft.userData.repositories = false;\n//         break;\n//       case LOAD_REPOS_SUCCESS:\n//         draft.userData.repositories = action.repos;\n//         draft.loading = false;\n//         draft.currentUser = action.username;\n//         break;\n//       case LOAD_REPOS_ERROR:\n//         draft.error = action.error;\n//         draft.loading = false;\n//         break;\n//     }\n//   });\n\nconst appReducer = (state = initialState, action) => {\n  return state;\n};\n\nexport default appReducer;","map":{"version":3,"sources":["/Users/yangpu-bt/personal/moonlt3/src/containers/App/reducer.js"],"names":["initialState","loading","error","currentUser","userData","repositories","appReducer","state","action"],"mappings":"AAAA;;;;;;;;AASA;AACA;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,KAAK,EAAE,KAFmB;AAG1BC,EAAAA,WAAW,EAAE,KAHa;AAI1BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE;AADN;AAJgB,CAArB;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAiC;AAChD,SAAOD,KAAP;AACH,CAFD;;AAIA,eAAeD,UAAf","sourcesContent":["/*\n * AppReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\n// import produce from 'immer';\n// import { LOAD_REPOS_SUCCESS, LOAD_REPOS, LOAD_REPOS_ERROR } from './constants';\n\n// The initial state of the App\nexport const initialState = {\n  loading: false,\n  error: false,\n  currentUser: false,\n  userData: {\n    repositories: false,\n  },\n};\n\n/* eslint-disable default-case, no-param-reassign */\n// const appReducer = (state = initialState, action) =>\n//   produce(state, draft => {\n//     switch (action.type) {\n//       case LOAD_REPOS:\n//         draft.loading = true;\n//         draft.error = false;\n//         draft.userData.repositories = false;\n//         break;\n\n//       case LOAD_REPOS_SUCCESS:\n//         draft.userData.repositories = action.repos;\n//         draft.loading = false;\n//         draft.currentUser = action.username;\n//         break;\n\n//       case LOAD_REPOS_ERROR:\n//         draft.error = action.error;\n//         draft.loading = false;\n//         break;\n//     }\n//   });\nconst appReducer = (state = initialState, action) =>{\n    return state;\n}\n\nexport default appReducer;\n"]},"metadata":{},"sourceType":"module"}